%
%
% data from
%
% http://brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
%
%Name             Gamma   Reference White   Red Primary            Green Primary          Blue Primary        Volume (deltaE^3)         Lab Gamut Efficiency  Coding Efficiency
%                                           x      y      Y        x      y      Y        x      y      Y
%Lab Gamut          -         D50           -      -      -        -      -      -        -      -      -        2,381,085                   97.0              35.1
%Adobe RGB (1998) 2.2         D65           0.6400 0.3300 0.297361 0.2100 0.7100 0.627355 0.1500 0.0600 0.075285 1,208,631                   50.6             100.0
%Apple RGB        1.8         D65           0.6250 0.3400 0.244634 0.2800 0.5950 0.672034 0.1550 0.0700 0.083332   798,403                   33.5             100.0
%Best RGB         2.2         D50           0.7347 0.2653 0.228457 0.2150 0.7750 0.737352 0.1300 0.0350 0.034191 2,050,725                   77.6              96.5
%Beta RGB         2.2         D50           0.6888 0.3112 0.303273 0.1986 0.7551 0.663786 0.1265 0.0352 0.032941 1,717,450                   69.3              99.0
%Bruce RGB        2.2         D65           0.6400 0.3300 0.240995 0.2800 0.6500 0.683554 0.1500 0.0600 0.075452   988,939                   41.5             100.0
%CIE RGB          2.2         E             0.7350 0.2650 0.176204 0.2740 0.7170 0.812985 0.1670 0.0090 0.010811 1,725,261                   64.3              96.1
%ColorMatch RGB   1.8         D50           0.6300 0.3400 0.274884 0.2950 0.6050 0.658132 0.1500 0.0750 0.066985   836,975                   35.2             100.0
%Don RGB 4        2.2         D50           0.6960 0.3000 0.278350 0.2150 0.7650 0.687970 0.1300 0.0350 0.033680 1,802,358                   72.1              98.8
%ECI RGB v2        L*         D50           0.6700 0.3300 0.320250 0.2100 0.7100 0.602071 0.1400 0.0800 0.077679 1,331,362                   55.3              99.7
%Ekta Space PS5   2.2         D50           0.6950 0.3050 0.260629 0.2600 0.7000 0.734946 0.1100 0.0050 0.004425 1,623,899                   65.7              99.5
%NTSC RGB         2.2         C             0.6700 0.3300 0.298839 0.2100 0.7100 0.586811 0.1400 0.0800 0.114350 1,300,252                   54.2              99.9
%PAL/SECAM RGB    2.2         D65           0.6400 0.3300 0.222021 0.2900 0.6000 0.706645 0.1500 0.0600 0.071334   849,831                   35.7             100.0
%ProPhoto RGB     1.8         D50           0.7347 0.2653 0.288040 0.1596 0.8404 0.711874 0.0366 0.0001 0.000086 2,879,568                   91.2              87.3
%SMPTE-C RGB      2.2         D65           0.6300 0.3400 0.212395 0.3100 0.5950 0.701049 0.1550 0.0700 0.086556   758,857                   31.9             100.0
%sRGB            #2.2         D65           0.6400 0.3300 0.212656 0.3000 0.6000 0.715158 0.1500 0.0600 0.072186   832,870                   35.0             100.0
%Wide Gamut RGB   2.2         D50           0.7350 0.2650 0.258187 0.1150 0.8260 0.724938 0.1570 0.0180 0.016875 2,164,221                   77.6              91.9
%
% 
% #2.2 - actual transform is more complex (see http://brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html )
%
% \deltaE^3 is the volume of the gamut in Lab space
% Coding efficiency is the amount of the gamut inside the horseshoe diagram
%
% implementation verified with Bruce Lindbloom's data
%


function [ M illuminant ] = XYZ_to_RGB_linear( rgb_space )


if nargin < 1
    rgb_space = 'sRGB';
end

color_spaces = { 'Adobe RGB (1998)', 'Apple RGB', 'Best RGB', 'Beta RGB', 'Bruce RGB','CIE RGB',...
                 'ColorMatch RGB','Don RGB 4','ECI RGB v2','Ekta Space PS5','NTSC RGB','PAL/SECAM RGB','ProPhoto RGB','SMPTE-C RGB','sRGB','Wide Gamut RGB'};


reference_whites = { 'D65', 'D65','D50','D50','D65','E','D50','D50','D50','D50','C','D65','D50','D65','D65','D50' };

gammas = [ 2.2, 1.8, 2.2, 2.2, 2.2, 2.2, 1.8, 1, 2.2, 2.2, 2.2, 1.8, 2.2, 1, 2.2 ];


xyY_red = [  0.6400 0.3300 0.297361;
             0.6250 0.3400 0.244634;
             0.7347 0.2653 0.228457;
             0.6888 0.3112 0.303273;
             0.6400 0.3300 0.240995;
             0.7350 0.2650 0.176204;
             0.6300 0.3400 0.274884;
             0.6960 0.3000 0.278350;
             0.6700 0.3300 0.320250;
             0.6950 0.3050 0.260629;
             0.6700 0.3300 0.298839;
             0.6400 0.3300 0.222021;
             0.7347 0.2653 0.288040;
             0.6300 0.3400 0.212395;
             0.6400 0.3300 0.212656;
             0.7350 0.2650 0.258187 ];

xyY_green = [ 0.2100 0.7100 0.627355;
              0.2800 0.5950 0.672034;
              0.2150 0.7750 0.737352;
              0.1986 0.7551 0.663786;
              0.2800 0.6500 0.683554;
              0.2740 0.7170 0.812985;
              0.2950 0.6050 0.658132;
              0.2150 0.7650 0.687970;
              0.2100 0.7100 0.602071;
              0.2600 0.7000 0.734946;
              0.2100 0.7100 0.586811;
              0.2900 0.6000 0.706645;
              0.1596 0.8404 0.711874;
              0.3100 0.5950 0.701049;
              0.3000 0.6000 0.715158;
              0.1150 0.8260 0.724938 ];

xyY_blue = [ 0.1500 0.0600 0.075285;
             0.1550 0.0700 0.083332;
             0.1300 0.0350 0.034191;
             0.1265 0.0352 0.032941;
             0.1500 0.0600 0.075452;
             0.1670 0.0090 0.010811;
             0.1500 0.0750 0.066985;
             0.1300 0.0350 0.033680;
             0.1400 0.0800 0.077679;
             0.1100 0.0050 0.004425;
             0.1400 0.0800 0.114350;
             0.1500 0.0600 0.071334;
             0.0366 0.0001 0.000086;
             0.1550 0.0700 0.086556;
             0.1500 0.0600 0.072186;
             0.1570 0.0180 0.016875 ];





for i = 1:length(color_spaces)
    if ( strcmp ( color_spaces( i ), rgb_space ) )
        index_row = i;
    end
end


[Xr,Yr,Zr] = xyY_to_XYZ( xyY_red( index_row, 1 ), xyY_red( index_row, 2 ), xyY_red( index_row, 3 ) );
[Xg,Yg,Zg] = xyY_to_XYZ( xyY_green( index_row, 1 ), xyY_green( index_row, 2 ), xyY_green( index_row, 3 ) );
[Xb,Yb,Zb] = xyY_to_XYZ( xyY_blue( index_row, 1 ), xyY_blue( index_row, 2 ), xyY_blue( index_row, 3 ) );


illuminant = char( reference_whites( index_row ) );

[Xw,Yw,Zw] = illuminant_xyz( illuminant );

S = inv( [ Xr Xg Xb; Yr Yg Yb; Zr Zg Zb ] ) * [Xw; Yw; Zw];

%this matrix is RGB to XYZ
M = [ S(1)*Xr S(2)*Xg S(3)*Xb; S(1)*Yr S(2)*Yg S(3)*Yb; S(1)*Zr S(2)*Zg S(3)*Zb ];


M = inv(M);